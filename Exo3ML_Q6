#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Sep 24 14:25:23 2021

@author: josedelcour
For this question, we'll see how to use a linear regression model from Scikit-Learn
We'll need to use the original column 'price'. Apply the logarithmic transformation to this column.
Fit the Ridge regression model on the training data.
This model has a parameter alpha. Let's try the following values: [0, 0.01, 0.1, 1, 10]
Which of these alphas leads to the best RMSE on the validation set? Round your RMSE scores to 3 decimal digits.
If there are multiple options, select the smallest alpha.
"""

import pandas as pd
import numpy as np

df = pd.read_csv('~/Downloads/AB_NYC_2019.csv')
col = ['neighbourhood_group',
'room_type',
'latitude',
'longitude',
'price',
'minimum_nights',
'number_of_reviews',
'reviews_per_month',
'calculated_host_listings_count',
'availability_365']
df=df[col]
df.fillna(0, inplace=True)

##Question 1: 
df['neighbourhood_group'].value_counts()
## MANHATTAN

"""
neighbourhood_group
room_type
number_of_reviews
reviews_per_month
"""
##Question 2:
from sklearn.model_selection import train_test_split
df_train_full, df_test = train_test_split(df, test_size=0.2, random_state=42)
df_train, df_val = train_test_split(df_train_full, test_size=0.25, random_state=42)
y_train=np.log1p(df_train.price.values)
y_val=np.log1p(df_val.price.values)
y_test=np.log1p(df_test.price.values)

del df_train['price']
del df_val['price']
del df_test['price']

numerical=['latitude',
'longitude',
'minimum_nights',
'number_of_reviews',
'reviews_per_month',
'calculated_host_listings_count',
'availability_365']

categorical=['room_type','neighbourhood_group']

from sklearn.feature_extraction import DictVectorizer

dv = DictVectorizer(sparse=False)
train_dicts = df_train[categorical+numerical].to_dict(orient='records')
val_dicts = df_val[categorical+numerical].to_dict(orient='records')

X_train = pd.DataFrame(dv.fit_transform(train_dicts))
X_val = pd.DataFrame(dv.fit_transform(val_dicts))
dv.get_feature_names()
X_train.columns = dv.get_feature_names()
X_val.columns = dv.get_feature_names()

from sklearn.linear_model import Ridge
for alpha in [0, 0.01, 0.1, 1, 10]:
    model = Ridge(alpha=alpha, fit_intercept=True, normalize=True, copy_X=True, solver='auto')
    model.fit(X_train, y_train)
    predicted = model.predict(X_train)
    from sklearn.metrics import mean_squared_error
    mse = mean_squared_error(y_train, predicted)
    print(alpha,'->',  mse**.5)

